#include <iostream>
#include <vector>
#include <map>

const int INF = 0;

using namespace std;

int points;
vector<vector<int>> distances;
vector<int> cur_distance;
vector<bool> ifVisited;

int getShortestNode() {
	multimap<int, int> d;
	for (int i = 0; i < points; i++) {
		if (ifVisited[i] == false && cur_distance[i] != 0) {
			d.insert(pair<int, int>(cur_distance[i], i + 1));
		}
	}
	return d.begin()->second;
}

void dijkstra(int start) {

	//cout << "dijkstra" << endl;

	cur_distance = distances[start - 1];
	ifVisited[start - 1] = true;

	int mode = 1;

	while (mode) {
		int cur = getShortestNode();
		//cout << "cur = " << cur << endl;
		mode = 0;
		for (int i = 0; i < points; i++) {
			ifVisited[cur - 1] = true;
			if (ifVisited[i] == false) {
				//cout << "comparing: " << i + 1 << endl;
				//cout << cur_distance[i] << "/" <<
					//cur_distance[cur - 1] + distances[cur - 1][i] << endl;
				if ((cur_distance[i] > cur_distance[cur - 1] + distances[cur - 1][i])
					|| (cur_distance[i] == 0 && distances[cur - 1][i] != 0)) {
					cur_distance[i] = cur_distance[cur - 1] + distances[cur - 1][i];
				}
				if (cur_distance[i] != 0) mode = 1;
			}
			//cout << "shorter one is: " << cur_distance[i] << endl;
		}

	}
}

int main(void) {
	cin >> points;
	for (int i = 0; i < points; i++) {
		distances.push_back(vector<int>(points, INF));
	}
	ifVisited.assign(points, false);

	int nodes;
	cin >> nodes;

	int start;
	cin >> start;

	int a, b, c;
	while (nodes--) {
		cin >> a >> b >> c;
		distances[a - 1][b - 1] = c;
	}

	dijkstra(start);

	for (int i = 0; i < points; i++) {
		if (i + 1 == start) cout << 0 << endl;
		else if (cur_distance[i] == 0) cout << "INF" << endl;
		else cout << cur_distance[i] << endl;
	}

	return 0;
}
